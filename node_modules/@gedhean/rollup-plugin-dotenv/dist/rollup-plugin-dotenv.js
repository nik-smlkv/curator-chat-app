'use strict'

Object.defineProperty(exports, '__esModule', { value: true })

var fs = require('fs')
var path = require('path')
var dotenv = require('dotenv')
var replace = require('@rollup/plugin-replace')

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : { default: e }
}

var fs__default = /*#__PURE__*/ _interopDefaultLegacy(fs)
var path__default = /*#__PURE__*/ _interopDefaultLegacy(path)
var dotenv__default = /*#__PURE__*/ _interopDefaultLegacy(dotenv)
var replace__default = /*#__PURE__*/ _interopDefaultLegacy(replace)

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key]
          }
        }
      }

      return target
    }

  return _extends.apply(this, arguments)
}

const mapKeys = (mapper, obj) =>
  Object.keys(obj).reduce((acc, key) => {
    acc[mapper(key)] = obj[key]
    return acc
  }, {})
const mapValues = (mapper, obj) =>
  Object.keys(obj).reduce((acc, key) => {
    acc[key] = mapper(obj[key])
    return acc
  }, {})
const shallowMergeAll = (objs) => Object.assign({}, ...objs)

const withDefaults = ({
  cwd = '.',
  envKey = 'NODE_ENV',
  preventAssignment = true,
  replaceAllEnvVars = true,
} = {}) => ({
  cwd: path__default['default'].resolve(process.cwd(), cwd),
  envKey,
  preventAssignment,
  replaceAllEnvVars,
})

function dotenvPlugin(inputOptions) {
  const { cwd, envKey, preventAssignment, replaceAllEnvVars } =
    withDefaults(inputOptions)
  return _extends(
    {},
    replace__default['default']({
      values: ((envVars) =>
        mapValues((value) => JSON.stringify(value), envVars))(
        ((envVars) => mapKeys((key) => `process.env.${key}`, envVars))(
          ((envVars) =>
            shallowMergeAll([replaceAllEnvVars ? process.env : {}, envVars]))(
            shallowMergeAll(
              ((priorities) =>
                [...priorities]
                  .reverse()
                  .map((dotenvFile) =>
                    path__default['default'].join(cwd, dotenvFile),
                  )
                  .filter(fs__default['default'].existsSync)
                  .map((dotenvFile) =>
                    fs__default['default'].readFileSync(dotenvFile),
                  )
                  .map(dotenv__default['default'].parse))([
                `.env.${process.env[envKey]}.local`,
                `.env.${process.env[envKey]}`,
                '.env.local',
                '.env',
              ]),
            ),
          ),
        ),
      ),
      preventAssignment,
    }),
    {
      name: 'dotenv',
    },
  )
}

exports['default'] = dotenvPlugin
